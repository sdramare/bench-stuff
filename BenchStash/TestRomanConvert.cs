using System.Collections.Generic;
using BenchmarkDotNet.Attributes;

namespace BenchStash
{
    public class TestRomanConvert
    {
        private static readonly Dictionary<char, int> Map = new()
        {
            { 'I', 1 },
            { 'V', 5 },
            { 'X', 10 },
            { 'L', 50 },
            { 'C', 100 },
            { 'D', 500 },
            { 'M', 1000 },
        };

        private const string TestInput =


        [Benchmark]
        [Arguments(TestInput)]
        public int RomanToArab(string input)
        {
            var result = 0;
            for (var i = 0; i < input.Length - 1; i++)
            {
                var value = Map[input[i]];
                result += value < Map[input[i + 1]] ? -value : value;
            }

            return result + Map[input[^1]];
        }

        [Benchmark]
        [Arguments(TestInput)]
        public int RomanToArab2(string input)
        {
            var result = 0;
            var value = Map[input[0]];
            for (var i = 0; i < input.Length - 1; i++)
            {
                var next = Map[input[i + 1]];
                result += value < next ? -value : value;
                value = next;
            }

            return result + Map[input[^1]];
        }
    }
}